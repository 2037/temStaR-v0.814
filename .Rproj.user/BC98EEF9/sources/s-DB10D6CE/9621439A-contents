library("quadprog")
library(quantmod)
library(functional)
library(nloptr)
library(pracma)
library(spatstat)
library(Matrix)
library("scatterplot3d")
library(foreach)
library(doParallel)
library(xtable)

source("../ntsengine_202006/temstarDist.R")
source("../ntsengine_202006/distSubTS.R")
source("../ntsengine_202006/distNTS.R")
source("../ntsengine_202006/distMultiNTS.R")
source("readHistoryStockDataFromYahoo.R")
source("emp_CVaR_ret.R")

ddCumRet <- function(cumret){
  # find DD of a portfolio using cumulative returns.
  #
  
  drawdown <- array(dim=length(cumret))
  for ( i in 1:length(cumret)){
    drawdown[i] <- (max(cumret[1:i])-cumret[i])
  }
  return(drawdown)
}

myobjfunction <- function(x, d, alpha){
  y <-  d-x
  y <-  y[y>0]
  n <-  length(d)
  
  return(x+sum(y)/((1-alpha)*n))
}

cDaRopt <- function( conflevel, inTimeseries ){
  #https://www.ise.ufl.edu/uryasev/files/2011/11/drawdown.pdf
  drawdown <- inTimeseries
  
  res <- optimize(functional::Curry(myobjfunction, d = drawdown, alpha = conflevel), c(0,1))
  retvalue = c(res$objective, res$minimum)
  names(retvalue) = c("CDaR", "DaR")
  return(retvalue)
}

#load("HorseRace22days_20200618.RData")

dd <- c(max(ddCumRet(cumret=hrCumRet[rangeindex])),
        max(ddCumRet(cumret=shCumRet[rangeindex])),
        max(ddCumRet(cumret=eqwCumRet[rangeindex])),
        max(ddCumRet(cumret=djCumRet[rangeindex])) )

cdardar <- rbind(cDaRopt(0.01,hrCumRet[rangeindex]),
                 cDaRopt(0.01,shCumRet[rangeindex]),
                 cDaRopt(0.01,eqwCumRet[rangeindex]),
                 cDaRopt(0.01,djCumRet[rangeindex]))
cdar <- c(cdardar[,1])
dar <- c(cdardar[,2]) 

resulttable <- rbind( resulttable, dd, dar, cdar)


rownames(resulttable) <- c("mean", "std", "VaR", "CVaR", "Sharpe Ratio", "VaR Ratio", "CVaR Ratio",
                           "Max DD", "DaR", "CDaR")
xtable(resulttable, display = c("s","e","e","e","e"))

hrstdntsparam <- fitstdnts((hr[rangeindex]-mean(hr[rangeindex]))/sd(hr[rangeindex]))
shstdntsparam <- fitstdnts((shRet[rangeindex]-mean(shRet[rangeindex]))/sd(shRet[rangeindex]))

hrasymrisk <- (sqrt(2*hrstdntsparam[2]/(2-hrstdntsparam[1]))-hrstdntsparam[3])/(2*sqrt(2*hrstdntsparam[2]/(2-hrstdntsparam[1])))
shasymrisk <- (sqrt(2*shstdntsparam[2]/(2-shstdntsparam[1]))-shstdntsparam[3])/(2*sqrt(2*shstdntsparam[2]/(2-shstdntsparam[1])))

resulttable[1,1]/resulttable[2,1]/hrasymrisk
resulttable[1,2]/resulttable[2,2]/shasymrisk
