library(functional)
library(pracma)
library(nloptr)
library(spatstat)
library("quantmod")

#source("tmpstarDist.R")
source("distNTS.R")
source("readHistoryStockDataFromYahoo.R")

serverReadBitcoin <- function(input, output) {
  
  observe({
    begindate <- input$begindate
    enddate <- input$enddate
    symb <- input$variable
    
    dataInput <- reactive({
      getSymbols(input$variable, src = "yahoo",
                 from = input$begindate,
                 to = input$enddate,
                 auto.assign = FALSE)
    })
    pd <- dataInput()
    stDate <-as.Date(index(pd))
    
    if(substr(symb, 1, 1)=="^")
      symb <- substr(symb, 2, 100)
    
    str1 <- paste( "pd$`", symb, ".Adjusted`", sep = "")
    Adj.Close <- eval(parse(text = str1))
    pr <- na.approx(as.numeric(Adj.Close))
    #pr <- pr[pr<1000000]
    ret <- as.numeric(diff(log(pr)))
    ret <- ret[!is.na(ret)]
    
    ntsparam = fitnts(ret)
    newparam <- change_ntsparam2stdntsparam(ntsparam)
    
    a = density(ret)
    #Femp = ecdf(ret)
    x = seq(from=min(ret), to = max(ret), length = 1000)
    pnts = dnts(x,ntsparam)
    #cntscdf = pnts(x, c(ntsparam))
    #cemp = Femp(x)
    pn = dnorm(x, mean = mean(ret), sd = sd(ret))
    #cn = pnorm(x, mean = mean(ret), sd = sd(ret))
    
    output$distPlot1 <- renderPlot({
      plot(as.Date(stDate[1:length(pr)]), pr, type = 'l', 
           xlab = 'Date', ylab = 'Price',
           main = 'Price Process',
           ylim = c(0.9*min(pr), max(pr)))
      #chartSeries(dataInput(), theme = chartTheme("white"), type = "line", TA = NULL)
      })
    output$distPlot2 <- renderPlot({
      plot(as.Date(stDate[2:(length(ret)+1)]), ret, type = 'l', 
           xlab = 'Date', ylab = 'Return',
           main = 'Return Process',
           ylim = c(0.9*min(ret), 1.1*max(ret)))
      #chartSeries(diff(log(dataInput())), theme = chartTheme("white"), type = "line", TA = NULL)
      })
    
    output$distPlot5 <- renderPlot({
      plot(a, col = 'darkgreen', 
           xlab = 'daily return', ylab = 'density', main = 'NTS fit',
           ylim=c(0, max(c(max(a$y), max(pnts)))))
      lines(x,pnts,type = 'l', col = 'red')
      lines(x,pn,type = 'l', col = 'blue')
      legend(min(x), max(pnts), legend = c("Empirical", "NTS", "Normal"),
             col = c("darkgreen", "red", "blue"), lty=1)
    })
    #output$distPlot6 <- renderPlot({
    #  plot(x,cntscdf,type = 'l',col = 'darkgreen', 
    #       xlab = 'daily return', ylab = 'CDF', main = 'NTS fit')
    #  points(x,cemp, type = 'l', col = 'red')
    #  points(x,cn,type = 'l', col = 'blue')
    #  legend(min(x), 0.95, legend = c("Empirical", "NTS", "Normal"),
    #         col = c("darkgreen", "red", "blue"), lty=1)
    #})
    #removeNotification(id)
    
    output$EstParamNTS <- renderPrint({
      cat("mu: ", newparam$mu)
      cat("\n")
      cat("sigma: ", newparam$sig)
      cat("\n")
      cat("alpha: ", newparam$stdparam[1] )
      cat("\n")
      cat("theta: ", newparam$stdparam[2])
      cat("\n")
      cat("B: ", newparam$stdparam[3]/sqrt(2*newparam$stdparam[2]/(2-newparam$stdparam[1])) )
      cat("\n")
      cat("\n")
    })
    
    url1 <- a("NTS Simulation", href="https://girininst.shinyapps.io/NTSDistFigureOut/")
    url2 <- a("NTS Fit", href="https://girininst.shinyapps.io/TSFit_AA/")
    url3 <- a("Risk Assessment", href="https://girininst.shinyapps.io/Risk_AA/")
    url4 <- a("Risk Timeseries", href="https://girininst.shinyapps.io/VaR_Timeseries_AA/")
    output$tab1 <- renderUI({
      tagList(">>", url1)
    })
    #output$tab2 <- renderUI({
    #  tagList("Demo2:", url2)
    #})
    output$tab3 <- renderUI({
      tagList(">>", url3)
    })
    output$tab4 <- renderUI({
      tagList(">>", url4)
    })
  })
  }