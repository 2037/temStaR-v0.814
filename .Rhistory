p = dnts(x,ntsparam)
plot(x,p,type = 'l', col = "red")
lines(a,type = 'l', col = "blue")
ntsparam <-  fitnts(ret)
library(nloptr)
ntsparam <-  fitnts(ret)
Femp = ecdf(ret)
x = seq(from=min(ret), to = max(ret), length.out = 100)
cemp = Femp(x)
ncdf = pnts(x, c(ntsparam))
plot(x,ncdf,type = 'l', col = "red")
points(x,cemp, type = 'l', col = "blue")
a = density(ret)
p = dnts(x,ntsparam)
plot(x,p,type = 'l', col = "red")
lines(a,type = 'l', col = "blue")
ntsparam
devtools::install_github("aaron9011/temStaR-v0.814")
library(temStaR)
library("quantmod")
getSymbols("^GSPC", src="yahoo", from = "2010-1-1", to = "2020-12-31")
pr <- as.numeric(GSPC$GSPC.Adjusted)
ret <- diff(log(pr))
ntsparam <-  fitnts(ret)
Femp = ecdf(ret)
x = seq(from=min(ret), to = max(ret), length.out = 100)
cemp = Femp(x)
ncdf = pnts(x, c(ntsparam))
plot(x,ncdf,type = 'l', col = "red")
points(x,cemp, type = 'l', col = "blue")
a = density(ret)
p = dnts(x,ntsparam)
plot(x,p,type = 'l', col = "red")
lines(a,type = 'l', col = "blue")
setwd("C:/Users/aaronkim/Google Drive/mypapers/CoVaR_NTS/RWorkingDirectory/Test1")
library(temStaR)
help(fitmnts)
setwd("C:/Users/aaronkim/Google Drive/mypapers/CoVaR_NTS/RWorkingDirectory/Test1")
library(mvtnorm)
help(nbvcdf)
help(mvtnorm)
install.packages(mvtnorm)
install.packages("mvtnorm")
install.packages("mvtnorm")
help(mvtnorm)
library(mvtnorm)
help(mvtnorm)
help("mvtnorm")
help(nbvcdf)
help(dmvnorm)
help(pmvnorm)
m <- 3
sigma <- diag(3)
sigma[2,1] <- 3/5
sigma[3,1] <- 1/3
sigma[3,2] <- 11/15
pmvnorm(lower=rep(-Inf, m), upper=c(1,4,2), mean=rep(0, m), corr=sigma)
res
getSymbols("^DJI", src="yahoo", from = "2020-8-25", to = "2020-12-31")
prDJ <- as.numeric(DJI$DJI.Adjusted)
ret <- diff(log(prDJ))
ntsparam <-  fitnts(ret)
getSymbols("IBM", src="yahoo", from = "2016-1-1", to = "2020-12-31")
pr1 <- as.numeric(IBM$IBM.Adjusted)
getSymbols("INTL", src="yahoo", from = "2016-1-1", to = "2020-12-31")
pr2 <- as.numeric(INTL$INTL.Adjusted)
returndata <- matrix(data = c(diff(log(pr1)),diff(log(pr2))),
ncol = 2, nrow = (length(pr1)-1))
res <- fitmnts( returndata = returndata,
n = 2,
alphaNtheta = c(ntsparam["alpha"], ntsparam["theta"])  )
library(temStaR)
library(functional)
library(nloptr)
library(pracma)
library(spatstat)
library(Matrix)
library(quantmod)
library(mvtnorm)
getSymbols("^DJI", src="yahoo", from = "2020-8-25", to = "2020-12-31")
prDJ <- as.numeric(DJI$DJI.Adjusted)
ret <- diff(log(prDJ))
ntsparam <-  fitnts(ret)
getSymbols("IBM", src="yahoo", from = "2016-1-1", to = "2020-12-31")
pr1 <- as.numeric(IBM$IBM.Adjusted)
getSymbols("INTL", src="yahoo", from = "2016-1-1", to = "2020-12-31")
pr2 <- as.numeric(INTL$INTL.Adjusted)
returndata <- matrix(data = c(diff(log(pr1)),diff(log(pr2))),
ncol = 2, nrow = (length(pr1)-1))
res <- fitmnts( returndata = returndata,
n = 2,
alphaNtheta = c(ntsparam["alpha"], ntsparam["theta"])  )
getSymbols("^DJI", src="yahoo", from = "2020-8-25", to = "2020-12-31")
prDJ <- as.numeric(DJI$DJI.Adjusted)
ret <- diff(log(prDJ))
ntsparam <-  fitnts(ret)
getSymbols("IBM", src="yahoo", from = "2016-1-1", to = "2020-12-31")
pr1 <- as.numeric(IBM$IBM.Adjusted)
getSymbols("INTL", src="yahoo", from = "2016-1-1", to = "2020-12-31")
pr2 <- as.numeric(INTL$INTL.Adjusted)
returndata <- matrix(data = c(diff(log(pr1)),diff(log(pr2))),
ncol = 2, nrow = (length(pr1)-1))
returndata
res <- fitmnts( returndata = returndata,
n = 2,
alphaNtheta = c(ntsparam["alpha"], ntsparam["theta"])  )
c(ntsparam["alpha"], ntsparam["theta"])
res <- fitmnts( returndata = returndata, n=2 )
res <- fitmnts( returndata = returndata,
n = 2,
alphaNtheta = c(ntsparam["alpha"], ntsparam["theta"])  )
library(temStaR)
devtools::load_all(".")
getSymbols("^DJI", src="yahoo", from = "2020-8-25", to = "2020-12-31")
prDJ <- as.numeric(DJI$DJI.Adjusted)
ret <- diff(log(prDJ))
ntsparam <-  fitnts(ret)
getSymbols("IBM", src="yahoo", from = "2016-1-1", to = "2020-12-31")
pr1 <- as.numeric(IBM$IBM.Adjusted)
getSymbols("INTL", src="yahoo", from = "2016-1-1", to = "2020-12-31")
pr2 <- as.numeric(INTL$INTL.Adjusted)
returndata <- matrix(data = c(diff(log(pr1)),diff(log(pr2))),
ncol = 2, nrow = (length(pr1)-1))
res <- fitmnts( returndata = returndata,
n = 2,
alphaNtheta = c(ntsparam["alpha"], ntsparam["theta"])  )
library(functional)
library(nloptr)
library(pracma)
library(spatstat)
library(Matrix)
library(quantmod)
getSymbols("^DJI", src="yahoo", from = "2020-8-25", to = "2020-12-31")
prDJ <- as.numeric(DJI$DJI.Adjusted)
ret <- diff(log(prDJ))
ntsparam <-  fitnts(ret)
getSymbols("IBM", src="yahoo", from = "2016-1-1", to = "2020-12-31")
pr1 <- as.numeric(IBM$IBM.Adjusted)
getSymbols("INTL", src="yahoo", from = "2016-1-1", to = "2020-12-31")
pr2 <- as.numeric(INTL$INTL.Adjusted)
returndata <- matrix(data = c(diff(log(pr1)),diff(log(pr2))),
ncol = 2, nrow = (length(pr1)-1))
res <- fitmnts( returndata = returndata,
n = 2,
alphaNtheta = c(ntsparam["alpha"], ntsparam["theta"])  )
alphaNtheta
alphaNtheta[1]
alphaNtheta[2]
strPMNTS$alpha <- as.numeric(alphaNtheta[1])
strPMNTS$alpha <- alphaNtheta[1]
strPMNTS$alpha
View(returndata )
getSymbols("^DJI", src="yahoo", from = "2020-8-25", to = "2020-8-31")
prDJ <- as.numeric(DJI$DJI.Adjusted)
ret <- diff(log(prDJ))
ntsparam <-  fitnts(ret)
getSymbols("IBM", src="yahoo", from = "2016-1-1", to = "2020-8-31")
pr1 <- as.numeric(IBM$IBM.Adjusted)
getSymbols("INTL", src="yahoo", from = "2016-1-1", to = "2020-8-31")
pr2 <- as.numeric(INTL$INTL.Adjusted)
returndata <- matrix(data = c(diff(log(pr1)),diff(log(pr2))),
ncol = 2, nrow = (length(pr1)-1))
res <- fitmnts( returndata = returndata,
n = 2,
alphaNtheta = c(ntsparam["alpha"], ntsparam["theta"])  )
res
getSymbols("^GSPC", src="yahoo", from = "2016-1-1", to = "2020-12-31")
pr1 <- as.numeric(GSPC$GSPC.Adjusted)
getSymbols("^DJI", src="yahoo", from = "2016-1-1", to = "2020-12-31")
pr2 <- as.numeric(DJI$DJI.Adjusted)
returndata <- matrix(data = c(diff(log(pr1)),diff(log(pr2))),
ncol = 2, nrow = (length(pr1)-1))
res <- fitmnts( returndata = returndata, n=2 )
res
getSymbols("INTL", src="yahoo", from = "2016-1-1", to = "2020-12-31")
pr2 <- as.numeric(INTL$INTL.Adjusted)
length(pr2)
pr2(115:117)
pr2[115:117]
data = c(diff(log(pr1)),diff(log(pr2)))
data[115:117,]
getSymbols("IBM", src="yahoo", from = "2016-1-1", to = "2020-12-31")
pr1 <- as.numeric(IBM$IBM.Adjusted)
getSymbols("INTL", src="yahoo", from = "2016-1-1", to = "2020-12-31")
pr2 <- as.numeric(INTL$INTL.Adjusted)
data = c(diff(log(pr1)),diff(log(pr2)))
data[115:117,]
tail(data)
returndata <- matrix(data = c(diff(log(pr1)),diff(log(pr2))),
ncol = 2, nrow = (length(pr1)-1))
tail(returndata)
pr2(1175:1176)
pr2[1175:1176]
pr2[1174:1176]
log(pr2[1174:1176])
diff(log(pr2[1174:1176]))
diff(log(pr1[1174:1176]))
data = c(diff(log(pr1)),diff(log(pr2)))
tail(data)
tail(diff(log(pr2)))
length(pr2)
tail(diff(log(pr2[1170:1177])))
tail(diff(log(pr2[1174:1177])))
tail(diff(log(pr2[1175:1177])))
tail(diff(log(pr2[1176:1177])))
pr2[1176:1177]
length(pr2)
pr2(1177)
pr2[1177]
pr1[1177]
pr2[1175:1177]
tail(INTL$INTL.Adjusted)
roxygen2::roxygenise()
devtools::document()
devtools::build_manual()
devtools::install_github("aaron9011/temStaR-v0.814")
library("temStaR")
source('C:/Users/aaronkim/Google Drive/mypapers/CoVaR_NTS/RWorkingDirectory/Test1/Test_CoVaR1.R')
res$Rho
res$ndim
pmvnorm(lower=rep(-Inf, res$ndim), upper=c(1,4), mean=rep(0, res$ndim), corr=res$Rho)
library(mvtnorm)
pmvnorm(lower=rep(-Inf, res$ndim), upper=c(1,4), mean=rep(0, res$ndim), corr=res$Rho)
res$Rho
as.numeric(res$Rho)
pmvnorm(lower=rep(-Inf, res$ndim), upper=c(1,4), mean=rep(0, res$ndim), corr=diag(2))
pmvnorm(lower=rep(-Inf, res$ndim), upper=c(1,4), mean=rep(0, res$ndim), corr=res$Rho)
matrix(data = as.numeric(res$Rho), ncol = 2, nrow = 2)
pmvnorm(lower=rep(-Inf, res$ndim), upper=c(1,4), mean=rep(0, res$ndim), corr=matrix(data = as.numeric(res$Rho), ncol = 2, nrow = 2))
pmvnorm(lower=rep(-Inf, res$ndim), upper=c(1,4), mean=rep(0, res$ndim), corr=res$CovMts)
matrix(data = as.numeric(res$Rho), ncol = 2, nrow = 2)
devtools::install_github("aaron9011/temStaR-v0.814")
library("temStaR")
source('C:/Users/aaronkim/Google Drive/mypapers/CoVaR_NTS/RWorkingDirectory/Test1/Test_CoVaR1.R')
pmvnorm(lower=rep(-Inf, res$ndim), upper=c(1,4), mean=rep(0, res$ndim), corr=res$Rho)
res$Rho
devtools::install_github("aaron9011/temStaR-v0.814")
devtools::install_github("aaron9011/temStaR-v0.814", force = TRUE)
library("temStaR")
source('C:/Users/aaronkim/Google Drive/mypapers/CoVaR_NTS/RWorkingDirectory/Test1/Test_CoVaR1.R')
pmvnorm(lower=rep(-Inf, res$ndim), upper=c(1,4), mean=rep(0, res$ndim), corr=matrix(data = as.numeric(res$Rho), ncol = 2, nrow = 2))
res$Rho
pmvnorm(lower=rep(-Inf, res$ndim), upper=c(1,4), mean=rep(0, res$ndim),
corr=res$Rho)
setwd("C:/Users/aaronkim/Google Drive/mypapers/EffFrontier_MNTS/RWorkingDirectory/test2_DJIA")
source('C:/Users/aaronkim/Google Drive/mypapers/EffFrontier_MNTS/RWorkingDirectory/test2_DJIA/test_Eff_MNTS_STD_DualProb_parallel.R')
source('C:/Users/aaronkim/Google Drive/mypapers/EffFrontier_MNTS/RWorkingDirectory/test1/test_Eff_MNTS_DualProb_parallel.R')
setwd("C:/Users/aaronkim/Google Drive/mypapers/EffFrontier_MNTS/RWorkingDirectory/test1")
source('C:/Users/aaronkim/Google Drive/mypapers/EffFrontier_MNTS/RWorkingDirectory/test1/test_Eff_MNTS_STD_DualProb_parallel.R')
plot_ly(x=x, y=y, z=z, type="scatter3d", mode="markers")
source('C:/Users/aaronkim/Google Drive/mypapers/EffFrontier_MNTS/RWorkingDirectory/test1/test_Eff_MNTS_STD_DualProb_parallel.R')
setwd("C:/Users/aaronkim/Google Drive/mypapers/EffFrontier_MNTS/RWorkingDirectory/test2_DJIA")
source('C:/Users/aaronkim/Google Drive/mypapers/EffFrontier_MNTS/RWorkingDirectory/test2_DJIA/test_Eff_MNTS_STD_DualProb_parallel.R')
source('C:/Users/aaronkim/Google Drive/mypapers/EffFrontier_MNTS/RWorkingDirectory/test2_DJIA/test_Eff_MNTS_STD_DualProb_parallel.R')
plot_ly(x=x, y=y, z=z, type="scatter3d", mode="markers")
devtools::install_github("aaron9011/temStaR-v0.814")
library("temStaR")
help(fitnts)
library("quantmod")
getSymbols("^GSPC", src="yahoo", from = "2010-1-1", to = "2020-12-31")
pr <- as.numeric(GSPC$GSPC.Adjusted)
ret <- diff(log(pr))
ntsparam <-  fitnts(ret)
Femp = ecdf(ret)
x = seq(from=min(ret), to = max(ret), length.out = 100)
cemp = Femp(x)
ncdf = pnts(x, c(ntsparam))
plot(x,ncdf,type = 'l', col = "red")
points(x,cemp, type = 'l', col = "blue")
a = density(ret)
p = dnts(x,ntsparam)
plot(x,p,type = 'l', col = "red")
lines(a,type = 'l', col = "blue")
setwd("C:/Users/aaronkim/Google Drive/mypapers/CoVaR_NTS/RWorkingDirectory/Test1")
library(temStaR)
setwd("C:/Users/aaronkim/Google Drive/mypapers/CoVaR_NTS/RWorkingDirectory/Test1")
source('C:/Users/aaronkim/Google Drive/mypapers/CoVaR_NTS/RWorkingDirectory/Test1/Test_CoVaR1.R')
res
temStaR::dsubTS(1, c( st$alpha,  st$theta))
library(temStaR)
roxygen2::roxygenize()
devtools::document
devtools::documents()
devtools::document()
devtools::install_github("aaron9011/temStaR-v0.814")
library(temStaR)
library(temStaR)
temStaR::qsubTS(c(0.05, 0.1), c(1,1))
library(temStaR)
devtools::load_all(".")
temStaR::qsubTS(c(0.05, 0.1), c(1,1))
temStaR::qsubTS(c(0.05, 0.1), c(1.1,1))
temStaR::dsubTS(c(0.05, 0.1), c(1.1,1))
temStaR::psubTS(c(0.05, 0.1), c(1.1,1))
temStaR::psubTS(c(0.05, 0.1), c(1.1,0.3))
temStaR::qsubTS(c(0.05, 0.1), c(1.1,0.3))
temStaR::qsubTS(0.1, c(1.1,0.3))
temStaR::qsubTS(0.1, c(1.1,0.3))
temStaR::qsubTS(0.1, c(1.1,0.3))
library(temStaR)
temStaR::qsubTS(0.1, c(1.1,0.3))
library(temStaR)
library(temStaR)
temStaR::qsubTS(0.1, c(1.1,0.3))
library(temStaR)
temStaR::qsubTS(0.1, c(1.1,0.3))
library(temStaR)
roxygen2::roxygenise()
devtools::document()
devtools::build_manual()
qsubTS(0.01, c(1.2, 0.3))
qsubTS(0.01, c(1.2, 0.3))
psubTS(0.01, c(1.2, 0.3))
nsubTS(1, c(1.2, 0.3))
rsubTS(1, c(1.2, 0.3))
ipsubTS(0.1, c(1.2, 0.3))
library(temStaR)
devtools::load_all(".")
library(temStaR)
roxygen2::roxygenise()
devtools::document()
devtools::load_all(".")
help("pmnts")
strPMNTS <- list(ndim = 2,
mu = c( 0.5, -1.5 ),
sigma = c( 2, 3 ),
alpha = 0.1,
theta = 3,
beta =  c( 0.1, -0.3 ),
Rho = matrix( data = c(1.0, 0.75, 0.75, 1.0),
nrow = 2, ncol = 2)
)
pmnts(c(0.6, -1.0), st = strPMNTS)
library(mvtnorm)
strPMNTS <- list(ndim = 2,
mu = c( 0.5, -1.5 ),
sigma = c( 2, 3 ),
alpha = 0.1,
theta = 3,
beta =  c( 0.1, -0.3 ),
Rho = matrix( data = c(1.0, 0.75, 0.75, 1.0),
nrow = 2, ncol = 2)
)
pmnts(c(0.6, -1.0), st = strPMNTS)
strPMNTS <- list(ndim = 2,
mu = c( 0, 0, 0 ),
sigma = c( 1, 1, 1 ),
alpha = 0.1,
theta = 3,
beta =  c( 0.1, -0.3, 0 ),
Rho = matrix(
data = c(1.0, 0.75, 0.1, 0.75, 1.0, 0.2, 0.1, 0.2, 1.0),
nrow = 3, ncol = 3)
)
dmnts(c(0,0,0), st = strPMNTS)
library(temStaR)
source("genDoc.R")
source("R\genDoc.R")
source("R/genDoc.R")
source('~/GitHub/temStaR-v0.814/genDoc.R')
source('~/GitHub/temStaR-v0.814/genDoc.R')
source('~/GitHub/temStaR-v0.814/genDoc.R')
source('~/GitHub/temStaR-v0.814/genDoc.R')
source('~/GitHub/temStaR-v0.814/R/distMultiNTS.R')
source('~/GitHub/temStaR-v0.814/genDoc.R')
source('~/GitHub/temStaR-v0.814/genDoc.R')
source('~/GitHub/temStaR-v0.814/genDoc.R')
devtools::build_manual(path = "./")
source('~/GitHub/temStaR-v0.814/genDoc.R')
library(temStaR)
source('~/GitHub/temStaR-v0.814/genDoc.R')
help(mctCVaRmnts)
library(temStaR)
cvarGauss(0.01)
print(cvarGauss(eta=0.01))
cvarGauss(0.01)
roxygen2::roxygenise()
devtools::documents
devtools::document()
roxygen2::roxygenize()
devtools::document()
source('~/GitHub/temStaR-v0.814/genDoc.R')
help(mctCVaRmnts)
source('~/GitHub/temStaR-v0.814/genDoc.R')
help(mctCVaRmnts)
getSymbols("^DJI", src="yahoo", from = "2020-8-25", to = "2020-08-31")
prDJ <- as.numeric(DJI$DJI.Adjusted)
ret <- diff(log(prDJ))
ntsparam <-  fitnts(ret)
getSymbols("IBM", src="yahoo", from = "2016-1-1", to = "2020-08-31")
pr1 <- as.numeric(IBM$IBM.Adjusted)
getSymbols("INTL", src="yahoo", from = "2016-1-1", to = "2020-08-31")
pr2 <- as.numeric(INTL$INTL.Adjusted)
returndata <- matrix(data = c(diff(log(pr1)),diff(log(pr2))),
ncol = 2, nrow = (length(pr1)-1))
st <- fitmnts( returndata = returndata,
n = 2,
alphaNtheta = c(ntsparam["alpha"], ntsparam["theta"])  )
w <- c(0.3, 0.7)
eta <- 0.01
mctVaRmnts(eta, 1, w) #MCT-VaR for IBM
mctVaRmnts(eta, 2, w) #MCT-VaR for INTL
mctCVaRmnts(eta, 1, w) #MCT-CVaR for IBM
mctCVaRmnts(eta, 2, w) #MCT-CVaR for INTL
#' library(functional)
#' library(nloptr)
#' library(pracma)
#' library(spatstat)
#' library(Matrix)
#' library(quantmod)
#' library(mvtnorm)
source('~/GitHub/temStaR-v0.814/genDoc.R')
help(mctCVaRmnts)
library(functional)
library(nloptr)
library(pracma)
library(spatstat)
library(Matrix)
library(quantmod)
library(mvtnorm)
#Fix alpha and theta.
#Estimate alpha dna theta from DJIA and use those parameter for IBM, INTL parameter fit.
getSymbols("^DJI", src="yahoo", from = "2020-8-25", to = "2020-08-31")
prDJ <- as.numeric(DJI$DJI.Adjusted)
ret <- diff(log(prDJ))
ntsparam <-  fitnts(ret)
getSymbols("IBM", src="yahoo", from = "2016-1-1", to = "2020-08-31")
pr1 <- as.numeric(IBM$IBM.Adjusted)
getSymbols("INTL", src="yahoo", from = "2016-1-1", to = "2020-08-31")
pr2 <- as.numeric(INTL$INTL.Adjusted)
returndata <- matrix(data = c(diff(log(pr1)),diff(log(pr2))),
ncol = 2, nrow = (length(pr1)-1))
st <- fitmnts( returndata = returndata,
n = 2,
alphaNtheta = c(ntsparam["alpha"], ntsparam["theta"])  )
w <- c(0.3, 0.7)
eta <- 0.01
mctVaRmnts(eta, 1, w) #MCT-VaR for IBM
mctVaRmnts(eta, 2, w) #MCT-VaR for INTL
mctCVaRmnts(eta, 1, w) #MCT-CVaR for IBM
mctCVaRmnts(eta, 2, w) #MCT-CVaR for INTL
library(temStaR)
mctCVaRmnts(eta, 2, w)
mctCVaRmnts(eta, 2, w, st)
st
w
eta
mctCVaRmnts(eta, 2, w, st)
w
covMtx
w %*% covMtx %*% t(w)
t(w) %*% covMtx %*% w
st$w
library(temStaR)
mctCVaRmnts(eta, 2, w)
mctCVaRmnts(eta, 2, w, st)
w
dim(w)
mctVaRmnts(eta, 2, w, st)
w%*%covMtx
w
library(temStaR)
mctVaRmnts(eta, 2, w, st)
w
betaArray
as.numeric(w)*as.numeric(betaArray)
sum(as.numeric(w)*as.numeric(betaArray))
mctVaRmnts(eta, 2, w, st)
as.numeric(w)%*%covMtx
as.numeric(w)%*%covMtx%*%t(as.numeric(w))
as.numeric(w)%*%st$CovMtx%*%t(as.numeric(w))
as.numeric(w)%*%st$CovMtx%*%t(w)
as.numeric(w)%*%st$CovMtx
t(w)
w
library(temStaR)
mctVaRmnts(eta, 2, w, st)
library(temStaR)
mctVaRmnts(eta, 2, w, st)
mctVaRmnts(eta, 1, w, st)
mctCVaRmnts(eta, 1, w, st)
mctCVaRmnts(eta, 2, w, st)
mctCVaRmnts(eta, 2, w, st)
library(temStaR)
mctCVaRmnts(eta, 2, w, st)
mctCVaRmnts(eta, 1, w, st)
barBeta <- sum(w*betaArray)CVaR <- cvarnts(eps = eta, ntsparam = c(alpha, theta, barBeta))
dCVaR <- dCVaR_numint(eta, alpha, theta, barBeta)
barBeta <- sum(w*matrix(data = st$beta, nrow = 1, ncol = st$ndim))
cvarnts(eps = eta, ntsparam = c(st$alpha, st$theta, barBeta))
CVaR <- cvarnts(eps = eta, ntsparam = c(st$alpha, st$theta, barBeta))
dCVaR <- dCVaR_numint(eta, st$alpha, st$theta, barBeta)
source('~/GitHub/temStaR-v0.814/genDoc.R')
library(temStaR)
source('~/GitHub/temStaR-v0.814/genDoc.R')
help(dmnts)
library(mvtnorm)
strPMNTS <- list(ndim = 2,
mu = c( 0.5, -1.5 ),
sigma = c( 2, 3 ),
alpha = 0.1,
theta = 3,
beta =  c( 0.1, -0.3 ),
Rho = matrix( data = c(1.0, 0.75, 0.75, 1.0),
nrow = 2, ncol = 2)
)
dmnts(c(0.6, -1.0), st = strPMNTS)
cvarmarginalmnts(0.01, 2, strPMNTS)
dmarginalmnts(0.01, 2, strPMNTS)
pmarginalmnts(0.01, 2, strPMNTS)
qmarginalmnts(0.01, 2, strPMNTS)
source('~/GitHub/temStaR-v0.814/genDoc.R')
